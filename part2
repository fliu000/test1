function wt_s1(c_guess, maxLoop)
    g_inf = 3.2 * 10^18; % surface excess coverage (molecules/m2), which is 3.2 molecules/nm^2
    D =  2.5 * 10^(-10); % diffusion coefficient (m2/s)
    k =  1.44 * 10^(-17); % adsorption constant (m3/molecule)
    c0 = 3.08 * 10^22; % initial bulk concentration (molecules/m3)
    w = 0.0005;
    t = 0.01;
    c = (1 : maxLoop);

%temp var for estimations
    c_1 = (1 : maxLoop);
    c_2 = (1 : maxLoop);
    c_3 = (1 : maxLoop);
    time_axis = (1 : maxLoop);
    maxIteration = 1000000;
    
    time_axis(1) = 0;
    time_axis(2) = t^2;

    c(1) = 0;
    c(2) = c_guess;
    
    g1(t) = g_inf * k * c(t) / (1 + k * c(t));
    g2_0 = 2 * sqrt (D * t / pi) * c0

    for n = 3 : maxLoop
        tn = (t * (n-1))^2 ;
        time_axis(n) = tn;
        
        %Step 1: make the first estimate
        c(n) =  c(n-1) + (c(n-1) - c(n-2));
        
        %disp(">>start loop");
        %disp(n);
            
        %Step 2: compute the g2(n)
        g2(n) = g_20 + 2 * sqrt (D / pi) * ();
        
        t = m * w;
        
        for i = 1 : (n - 1)
            P1 = 2 / 3 * (c((n - i) * w) - c((n - i - 1) * w)) * ((i + 1)^(3/2) - i^(3/2)) * sqrt(w);
            P2 = 2 * ((i + 1) * c((n - i) * w) - i * c((n - i - 1) * w)) * ((i + 1)^(1/2) - i^(1/2)) * sqrt(w);
        end
        
            
            
            
            
            
            
            
            g2_int = (4 / 3 * c(n * w) + 2 / 3 * c((n - 1) * w)) * sqrt(w) - P1 + P2;
        
        
        
        
        
        
        
        
        %Step 3: make the second estimate
            
            %Step 4: check whether second estimates are within 1%
            %of first estimate
            
            %disp('iter');
            %disp(iter);
            %disp(x_2(n));
            %disp(x_1(n));
            %disp(abs(x_2(n)/x_1(n) - 1));
            if (x_m - x_2(n) - y_2(n) > 0)
            x_2(n) = x_2(n);
            y_2(n) = y_2(n);
        
            else     
            %If no, stop.
            x_2(n) =  1/2 * (x_1(n) + x_2(n));
            y_2(n) =  1/2 * (y_1(n) + y_2(n));
            end
            end
            
            if (abs(x_2(n)/x_1(n) - 1) < 0.01 && abs(y_2(n)/y_1(n) - 1) < 0.01)
                % && (x_m - x_2(n)) > 0 && (x_m - y_2(n)) > 0 && (x_m - x_2(n)- y_2(n)) > 0
                %If yes, use second estimate as x(n), y(n)
                x(n) = x_2(n);
                y(n) = y_2(n);
                %disp('found less than threshold');
                %disp(n);
                break;
            else 
                %If no, make the third estimate.
                x_3(n) = 1/2 * (x_1(n) + x_2(n));
                y_3(n) = 1/2 * (y_1(n) + y_2(n));
    
                %go to step 2.
                
                x_1(n) = x_3(n);
                y_1(n) = y_3(n);
            
            end
        end
    end
    
    %disp('final');
    %disp(x);
    %disp('est 1.');
    %disp(x_1);
    %disp('est 2.');
    %disp(x_2);

    clf;
    
    % Plotting
    plot(time_axis, c, 'blue');
    hold on
    plot(time_axis, g, 'red');
    grid on;
    xlabel('time (s)');
    ylabel('surface coverage (molecules/m2)/subsurface concentration (molecules/m3)');
    title('single component');
